import requests
import os
import json
import hashlib
from datetime import datetime
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("debug.log"),
              logging.StreamHandler()])
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
load_dotenv()
API_KEY = os.getenv("CRYPTORANK_API_KEY")
DATA_DIR = "data"
os.makedirs(DATA_DIR, exist_ok=True)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CURRENT_PATH = os.path.join(DATA_DIR, "data_current.json")
OLD_PATH = os.path.join(DATA_DIR, "data_old.json")
NEW_PATH = os.path.join(DATA_DIR, "new_latest.json")

# –ö—ç—à –¥–ª—è —Ö—ç—à–µ–π –ø—Ä–æ–µ–∫—Ç–æ–≤ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
project_hashes = set()


def fetch_projects():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å CryptoRank —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    url = "https://api.cryptorank.io/v1/currencies"
    all_projects = []
    limit = 100
    offset = 0

    while True:
        try:
            params = {"api_key": API_KEY, "limit": limit, "offset": offset}
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()

            data = response.json().get("data", [])
            if not data:
                break

            all_projects.extend(data)
            offset += limit
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –ø—Ä–æ–µ–∫—Ç–æ–≤ (offset: {offset})")

        except (requests.RequestException, json.JSONDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            break

    logger.info(f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(all_projects)}")
    return all_projects


def load_data(path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π."""
    if not os.path.exists(path):
        return []

    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            unique = []
            seen_ids = set()

            for item in data:
                item_id = item.get("id")
                if item_id and item_id not in seen_ids:
                    seen_ids.add(item_id)
                    unique.append(item)

            return unique

    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {path}: {e}")
        return []


def save_data(data, path):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {path}")

    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {path}: {e}")


def get_project_hash(project):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    return hashlib.md5(json.dumps(project,
                                  sort_keys=True).encode("utf-8")).hexdigest()


def compare_projects(current, old):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —Ö—ç—à–∞–º."""
    global project_hashes

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—ç—à–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not project_hashes:
        project_hashes.update(get_project_hash(p) for p in old)

    new_projects = [
        p for p in current if get_project_hash(p) not in project_hashes
    ]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ö—ç—à–µ–π
    project_hashes.update(get_project_hash(p) for p in current)
    return new_projects


def get_strictly_new_projects():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã."""
    current = fetch_projects()
    old = load_data(OLD_PATH)

    if not old:
        save_data(current, OLD_PATH)
        save_data(current, CURRENT_PATH)
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤")
        return [], "üÜï –ë–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"

    new_projects = compare_projects(current, old)
    save_data(current, CURRENT_PATH)

    if new_projects:
        save_data(new_projects, NEW_PATH)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_projects)} –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
    else:
        logger.info("–ù–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    summary = (f"üìÅ –í –±–∞–∑–µ: {len(old)}\n"
               f"üåê –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(current)}\n"
               f"üÜï –ù–æ–≤—ã—Ö: {len(new_projects)}")
    return new_projects, summary


def save_new_projects(new_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö."""
    simplified = [{
        "name": p.get("name"),
        "url": f"https://cryptorank.io/price/{p.get('slug', '')}",
        "website": p.get("links", {}).get("website", [None])[0]
    } for p in new_data]
    save_data(simplified, NEW_PATH)


def update_database():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤."""
    current = load_data(CURRENT_PATH)
    save_data(current, OLD_PATH)
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
