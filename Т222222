import os
import json
import requests
import openai
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# Настройка детального логгирования
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG,  # Изменили на DEBUG для подробного вывода
    handlers=[
        logging.StreamHandler(),  # Вывод в консоль
        logging.FileHandler('bot.log')  # Запись в файл
    ])
logger = logging.getLogger(__name__)

# Загрузка конфигурации
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TG_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_KEY = os.getenv("CRYPTORANK_API_KEY")
MAIN_DB = 'crypto_projects_db.json'

# Настройка OpenAI
openai.api_key = OPENAI_API_KEY


class CryptoAnalyzer:

    def __init__(self):
        self.db_file = MAIN_DB
        self.db = self._load_db()
        self.session = requests.Session()
        self.session.headers.update({
            'Accept': 'application/json',
            'User-Agent': 'Mozilla/5.0'
        })
        logger.debug("Инициализирован CryptoAnalyzer")

    def _load_db(self):
        """Загрузка базы данных с подробным логированием"""
        try:
            if os.path.exists(self.db_file):
                logger.debug(f"Загрузка базы данных из {self.db_file}")
                with open(self.db_file, 'r') as f:
                    data = json.load(f)
                    logger.debug(
                        f"Загружено {len(data.get('projects', {}))} проектов")
                    return data
            logger.debug("База данных не найдена, создаем новую")
            return {'projects': {}, 'last_update': None}
        except Exception as e:
            logger.error(f"Ошибка загрузки базы данных: {e}")
            return {'projects': {}, 'last_update': None}

    def _save_db(self):
        """Сохранение базы данных с логированием"""
        try:
            with open(self.db_file, 'w') as f:
                json.dump(self.db, f, indent=2)
            logger.debug(f"База данных сохранена в {self.db_file}")
        except Exception as e:
            logger.error(f"Ошибка сохранения базы данных: {e}")

    def get_project_key(self, project):
        """Генерация ключа проекта"""
        return str(project['id'])

    def is_unlisted(self, project):
        """Проверка отсутствия листинга с подробным логированием"""
        # Сначала проверяем, есть ли уже флаг is_unlisted в проекте
        if 'is_unlisted' in project:
            return project['is_unlisted']

        slug = project.get('slug')
        if not slug:
            logger.debug(f"Проект {project.get('name')} не имеет slug")
            return True

        try:
            url = f"https://api.cryptorank.io/v1/currencies/{slug}/exchanges"
            logger.debug(f"Проверка листинга для {slug} по URL: {url}")

            response = self.session.get(url,
                                        params={'api_key': API_KEY},
                                        timeout=15)
            logger.debug(f"Ответ API: {response.status_code}")

            if response.status_code == 404:
                logger.debug(f"Проект {slug} не имеет страницы exchanges")
                return True

            data = response.json().get('data', [])
            logger.debug(f"Найдено {len(data)} бирж для {slug}")

            return len(data) == 0

        except Exception as e:
            logger.error(f"Ошибка проверки листинга для {slug}: {e}")
            return True

    def fetch_projects(self):
        """Получение проектов с API с прогресс-логгированием"""
        all_projects = []
        offset = 0
        chunk_size = 100
        total = 0

        logger.info("Начало загрузки проектов с API Cryptorank")

        while True:
            try:
                params = {
                    'api_key': API_KEY,
                    'limit': chunk_size,
                    'offset': offset,
                    'sort': 'rank'
                }
                logger.debug(
                    f"Запрос проектов (offset: {offset}, limit: {chunk_size})")

                response = self.session.get(
                    "https://api.cryptorank.io/v1/currencies",
                    params=params,
                    timeout=30)
                data = response.json().get('data', [])

                if not data:
                    logger.info(f"Завершена загрузка. Всего проектов: {total}")
                    break

                all_projects.extend(data)
                count = len(data)
                total += count
                offset += count

                logger.info(f"Загружено {count} проектов. Всего: {total}")

            except Exception as e:
                logger.error(f"Ошибка при загрузке проектов: {e}")
                break

        return all_projects

    def analyze_projects(self):
        """Анализ проектов с подробным логированием"""
        logger.info("Начало анализа проектов")
        projects = self.fetch_projects()
        new_unlisted = []
        total = len(self.db['projects'])

        for i, project in enumerate(projects, 1):
            key = self.get_project_key(project)
            if key in self.db['projects']:
                continue

            is_unlisted = self.is_unlisted(project)
            logger.debug(
                f"Проект {project.get('name')} - unlisted: {is_unlisted}")

            project_data = {
                'id': project.get('id'),
                'name': project.get('name'),
                'symbol': project.get('symbol'),
                'url': f"https://cryptorank.io/price/{project.get('slug')}",
                'exchanges_url':
                f"https://cryptorank.io/price/{project.get('slug')}/exchanges",
                'description': project.get('description', 'нет описания'),
                'industry': project.get('industry', 'не указана'),
                'investors': project.get('investors', []),
                'is_unlisted': is_unlisted,
                'priceUsd': project.get('priceUsd'),
                'added': datetime.now().strftime('%Y-%m-%d %H:%M')
            }

            self.db['projects'][key] = project_data
            if is_unlisted:
                new_unlisted.append(project_data)
                logger.info(
                    f"Новый проект без листинга: {project.get('name')}")

            if i % 100 == 0:
                logger.info(
                    f"Обработано {i} проектов. Новых без листинга: {len(new_unlisted)}"
                )

        self.db['last_update'] = datetime.now().strftime('%Y-%m-%d %H:%M')
        self._save_db()

        logger.info(
            f"Анализ завершен. Всего проектов: {len(self.db['projects'])}. Новых без листинга: {len(new_unlisted)}"
        )
        return new_unlisted

    def get_all_unlisted(self):
        """Получение всех незалистившихся проектов"""
        unlisted = [
            p for p in self.db['projects'].values() if p['is_unlisted']
        ]
        logger.debug(f"Получено {len(unlisted)} проектов без листинга")
        return unlisted

    def get_new_unlisted(self):
        """Получение новых незалистившихся проектов"""
        unlisted = [
            p for p in self.db['projects'].values()
            if p['is_unlisted'] and p['added'] == self.db['last_update']
        ]
        logger.debug(f"Получено {len(unlisted)} новых проектов без листинга")
        return unlisted

    def generate_ai_report(self, projects):
        """Генерация AI отчета с логированием"""
        logger.info(f"Начало генерации AI отчета для {len(projects)} проектов")
        report = []

        for i, project in enumerate(projects[:20], 1):
            try:
                logger.debug(
                    f"Анализ проекта {i}/{len(projects)}: {project['name']}")

                prompt = (
                    f"Проанализируй криптопроект без листинга:\n"
                    f"Название: {project['name']}\n"
                    f"Символ: {project['symbol']}\n"
                    f"Описание: {project['description']}\n"
                    f"Индустрия: {project['industry']}\n"
                    f"Инвесторы: {', '.join(project['investors']) if project['investors'] else 'неизвестны'}\n\n"
                    "Этот проект не имеет листинга на биржах. Оцени его потенциал."
                )

                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{
                        "role": "system",
                        "content": "Ты криптоаналитик."
                    }, {
                        "role": "user",
                        "content": prompt
                    }],
                    temperature=0.7)

                analysis = response.choices[0].message.content
                report.append(f"🔹 {project['name']} ({project['symbol']})\n"
                              f"🔗 {project['url']}\n"
                              f"📌 Без листинга\n\n"
                              f"{analysis}\n"
                              f"{'-'*40}\n")

                logger.debug(
                    f"Успешно проанализирован проект {project['name']}")

            except Exception as e:
                error_msg = f"Ошибка анализа {project['name']}: {str(e)}"
                report.append(f"⚠️ {error_msg}")
                logger.error(error_msg)

        logger.info("Генерация AI отчета завершена")
        return "\n".join(report)


# Обработчики команд Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработчик команды /start"""
    logger.debug(f"Обработка команды /start от {update.effective_user.id}")
    await update.message.reply_text(
        "🔍 Бот для анализа незалистившихся проектов\n\n"
        "Команды:\n"
        "/update - Обновить базу\n"
        "/unlisted - Показать новые проекты без листинга\n"
        "/unlisted_all - Показать все проекты без листинга\n"
        "/ai_report - AI анализ новых проектов")


async def update_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обновление базы данных"""
    logger.debug(f"Обработка команды /update от {update.effective_user.id}")
    analyzer = CryptoAnalyzer()
    msg = await update.message.reply_text("🔄 Обновляю базу данных...")

    try:
        new_unlisted = analyzer.analyze_projects()
        response = (f"✅ База обновлена\n"
                    f"Всего проектов: {len(analyzer.db['projects'])}\n"
                    f"Новых без листинга: {len(new_unlisted)}")
        logger.info(response)
        await msg.edit_text(response)
    except Exception as e:
        error_msg = f"❌ Ошибка обновления базы: {str(e)}"
        logger.error(error_msg)
        await msg.edit_text(error_msg)


async def show_unlisted(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Показать новые незалистившиеся проекты"""
    logger.debug(f"Обработка команды /unlisted от {update.effective_user.id}")
    analyzer = CryptoAnalyzer()

    try:
        unlisted = analyzer.get_new_unlisted()
        if not unlisted:
            msg = "✅ Нет новых проектов без листинга"
            logger.debug(msg)
            await update.message.reply_text(msg)
            return

        message = "📋 Новые проекты без листинга:\n\n" + "\n".join(
            f"{i}. {p['name']} - {p['url']}"
            for i, p in enumerate(unlisted[:15], 1))

        logger.debug(f"Отправка списка из {len(unlisted)} проектов")
        await update.message.reply_text(message)

    except Exception as e:
        error_msg = f"❌ Ошибка получения списка: {str(e)}"
        logger.error(error_msg)
        await update.message.reply_text(error_msg)


async def show_all_unlisted(update: Update,
                            context: ContextTypes.DEFAULT_TYPE):
    """Показать все проекты без листинга"""
    logger.debug(
        f"Обработка команды /unlisted_all от {update.effective_user.id}")
    analyzer = CryptoAnalyzer()

    try:
        unlisted = analyzer.get_all_unlisted()
        if not unlisted:
            msg = "✅ Нет проектов без листинга"
            logger.debug(msg)
            await update.message.reply_text(msg)
            return

        message = "📋 Все проекты без листинга:\n\n" + "\n".join(
            f"{i}. {p['name']} - {p['url']}\nДобавлен: {p['added']}"
            for i, p in enumerate(unlisted, 1))

        logger.debug(f"Подготовка списка из {len(unlisted)} проектов")

        # Разбиваем на сообщения по 2000 символов
        for i in range(0, len(message), 2000):
            await update.message.reply_text(message[i:i + 2000])

    except Exception as e:
        error_msg = f"❌ Ошибка получения полного списка: {str(e)}"
        logger.error(error_msg)
        await update.message.reply_text(error_msg)


async def ai_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """AI анализ новых проектов"""
    logger.debug(f"Обработка команды /ai_report от {update.effective_user.id}")
    analyzer = CryptoAnalyzer()
    msg = await update.message.reply_text("🤖 AI анализирует проекты...")

    try:
        unlisted = analyzer.get_new_unlisted()
        if not unlisted:
            response = "✅ Нет новых проектов для анализа"
            logger.debug(response)
            await msg.edit_text(response)
            return

        logger.info(f"Начало AI анализа для {len(unlisted)} проектов")
        report = analyzer.generate_ai_report(unlisted)

        # Разбиваем отчет на части
        for i in range(0, len(report), 4000):
            await update.message.reply_text(report[i:i + 4000])

        response = "📊 AI анализ завершен"
        logger.info(response)
        await msg.edit_text(response)

    except Exception as e:
        error_msg = f"❌ Ошибка AI анализа: {str(e)}"
        logger.error(error_msg)
        await msg.edit_text(error_msg)


def main():
    """Запуск бота с обработкой ошибок"""
    try:
        logger.info("Запуск бота...")
        app = ApplicationBuilder().token(TG_TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("update", update_db))
        app.add_handler(CommandHandler("unlisted", show_unlisted))
        app.add_handler(CommandHandler("unlisted_all", show_all_unlisted))
        app.add_handler(CommandHandler("ai_report", ai_report))

        logger.info("Бот успешно запущен")
        app.run_polling()

    except Exception as e:
        logger.critical(f"Критическая ошибка при запуске бота: {str(e)}")
        raise


if __name__ == '__main__':
    main()
