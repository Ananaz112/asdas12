import os
import requests
import json
from time import sleep
from dotenv import load_dotenv

# Загрузка конфигурации
load_dotenv()
API_KEY = os.getenv('CRYPTORANK_API_KEY')
BASE_URL = 'https://api.cryptorank.io/v1'
OUTPUT_FILE = 'crypto_projects.json'


def get_all_projects():
    """Получить все проекты с Cryptorank"""
    all_projects = []
    offset = 0
    limit = 100

    while True:
        try:
            params = {'limit': limit, 'offset': offset, 'api_key': API_KEY}

            response = requests.get(f"{BASE_URL}/currencies",
                                    params=params,
                                    timeout=30)

            if response.status_code == 401:
                error_data = response.json()
                print(
                    f"Ошибка авторизации: {error_data.get('error', {}).get('message', 'Неверный API ключ')}"
                )
                return None

            response.raise_for_status()

            data = response.json()
            projects = data.get('data', [])

            if not projects:
                break

            all_projects.extend(projects)
            offset += len(projects)

            print(
                f"Получено {len(projects)} проектов, всего {len(all_projects)}"
            )

            if len(projects) < limit:
                break

            sleep(1)

        except requests.exceptions.RequestException as e:
            print(f"Ошибка запроса: {str(e)}")
            break
        except Exception as e:
            print(f"Неожиданная ошибка: {str(e)}")
            break

    return all_projects


def save_projects(projects):
    """Сохранить проекты в файл"""
    try:
        with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
            json.dump(projects, f, indent=2, ensure_ascii=False)
        print(f"Данные сохранены в {OUTPUT_FILE}")
    except Exception as e:
        print(f"Ошибка при сохранении файла: {str(e)}")


def main():
    print("Начинаем сбор данных...")

    if not API_KEY:
        print("ОШИБКА: API ключ не найден в .env файле")
        print("Убедитесь что:")
        print("1. Файл .env существует в той же папке")
        print("2. Содержит строку: CRYPTORANK_API_KEY=ваш_ключ")
        print("3. Ключ не содержит лишних пробелов или кавычек")
        return

    print(f"Используется API ключ: {API_KEY[:5]}...{API_KEY[-5:]}")

    projects = get_all_projects()

    if not projects:
        print("Не удалось получить проекты. Возможные причины:")
        print("1. Неверный API ключ")
        print("2. Лимиты API исчерпаны")
        print("3. Проблемы с интернет-соединением")
        print(
            f"Попробуйте проверить API вручную: {BASE_URL}/currencies?limit=1&api_key={API_KEY}"
        )
        return

    save_projects(projects)

    if projects:
        print("\nПример данных первого проекта:")
        print(json.dumps(projects[0], indent=2, ensure_ascii=False))


if __name__ == '__main__':
    main()
