import os
import sqlite3
import telebot  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ pyTelegramBotAPI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bot API Telegram
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
print(f"–¢–æ–∫–µ–Ω –∏–∑ .env: {TOKEN}")  # –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

if not TOKEN:
    raise ValueError(
        "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ."
    )

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
TOKEN = os.environ.get(
    "TELEGRAM_BOT_TOKEN")  # –¢–æ–∫–µ–Ω Bot API, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
if not TOKEN:
    TOKEN = "YOUR_BOT_TOKEN_HERE"  # –∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)

bot = telebot.TeleBot(
    TOKEN, parse_mode='HTML'
)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (SQLite –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞; –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PostgreSQL)
db = sqlite3.connect("bot_aggregator.db", check_same_thread=False)
cur = db.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü (Users, Bots, Categories) –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
cur.execute("""
CREATE TABLE IF NOT EXISTS Users (
    id            INTEGER PRIMARY KEY,
    username      TEXT,
    first_name    TEXT,
    invite_code   TEXT UNIQUE,
    invited_by    INTEGER,
    referrals_count INTEGER DEFAULT 0,
    access_unlocked INTEGER DEFAULT 0
);
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS Bots (
    id          INTEGER PRIMARY KEY AUTOINCREMENT,
    name        TEXT,
    username    TEXT,
    description TEXT,
    category    TEXT,
    added_by    INTEGER,
    approved    INTEGER DEFAULT 1
);
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS Categories (
    id   INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE
);
""")
db.commit()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def get_user(user_id, username, first_name, ref_code=None):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–∑ –ë–î. –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.
    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ref_code (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª –ø–æ —á—å–µ–π-—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ),
    —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç invited_by –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á—ë—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ.
    """
    cur.execute(
        "SELECT id, access_unlocked, invite_code FROM Users WHERE id = ?",
        (user_id, ))
    row = cur.fetchone()
    if row:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return row
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π: —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
    invite_code = generate_invite_code(
    )  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invited_by = None
    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ (–µ—Å—Ç—å ref_code)
    if ref_code:
        # –ù–∞–π—Ç–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ invite_code
        cur.execute("SELECT id FROM Users WHERE invite_code = ?", (ref_code, ))
        inviter = cur.fetchone()
        if inviter:
            invited_by = inviter[0]
            # –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
            cur.execute(
                "UPDATE Users SET referrals_count = referrals_count + 1 WHERE id = ?",
                (inviter[0], ))
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö; –µ—Å–ª–∏ >=1 –∏ –¥–æ—Å—Ç—É–ø –µ—â—ë –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
            cur.execute(
                "SELECT referrals_count, access_unlocked FROM Users WHERE id = ?",
                (inviter[0], ))
            ref_count, unlocked = cur.fetchone()
            if ref_count >= 1 and unlocked == 0:
                cur.execute(
                    "UPDATE Users SET access_unlocked = 1 WHERE id = ?",
                    (inviter[0], ))
    # –í—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cur.execute(
        "INSERT INTO Users (id, username, first_name, invite_code, invited_by, access_unlocked) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, username, first_name, invite_code, invited_by, 0))
    db.commit()
    return (user_id, 0, invite_code)


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
import string, random


def generate_invite_code(length=8):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π."""
    while True:
        code = ''.join(
            random.choices(string.ascii_letters + string.digits, k=length))
        cur.execute("SELECT id FROM Users WHERE invite_code = ?", (code, ))
        if not cur.fetchone():
            return code


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    –∏ –¥–∞—ë—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ò–∑–≤–ª–µ—á—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
    parts = message.text.split()
    ref_code = parts[1] if len(parts) > 1 else None

    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    # –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id, access_unlocked, invite_code = get_user(user_id, username,
                                                     first_name, ref_code)

    if access_unlocked:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
        bot.reply_to(
            message,
            f"ü§ñ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}! –î–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É –±–æ—Ç–æ–≤ —É –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–æ—Ç–æ–≤ –∏–ª–∏ /addbot, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π."
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –∏–ª–∏ –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª —É—Å–ª–æ–≤–∏–µ –¥–æ—Å—Ç—É–ø–∞
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –±–æ—Ç–æ–≤.\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º **–∏–ª–∏**\n"
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥.\n\n"
            "–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑ —ç—Ç–∏—Ö —É—Å–ª–æ–≤–∏–π –≤—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
        )
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        bot.reply_to(message, welcome_text)
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞" –∏ "–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞"
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True,
                                                   one_time_keyboard=True)
        btn1 = telebot.types.KeyboardButton("üî• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
        btn2 = telebot.types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞")
        markup.row(btn1, btn2)
        bot.send_message(message.chat.id,
                         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:",
                         reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞" –∏–ª–∏ "–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞")
@bot.message_handler(
    func=lambda msg: msg.text in ["üî• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞"])
def handle_menu_selection(message):
    user_id = message.from_user.id
    cur.execute("SELECT access_unlocked, invite_code FROM Users WHERE id = ?",
                (user_id, ))
    user = cur.fetchone()
    if not user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (—Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–µ –≤—ã–∑—ã–≤–∞–ª /start)
        bot.reply_to(
            message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
        return
    access_unlocked, invite_code = user
    if access_unlocked:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, –º–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥—Ä—É–≥–∏–º (–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        bot.reply_to(
            message,
            "–£ –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É! –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–æ—Ç–æ–≤."
        )
        return
    if message.text == "üî• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞":
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        bot_username = bot.get_me(
        ).username  # –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—é–∑–µ—Ä–Ω–µ–π–º) –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
        invite_link = f"https://t.me/{bot_username}?start={invite_code}"
        bot.send_message(
            message.chat.id,
            f"üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ–≥–æ:\n{invite_link}\n"
            "–ö–æ–≥–¥–∞ –≤–∞—à –¥—Ä—É–≥ –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É!"
        )
    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞":
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞
        if access_unlocked:
            bot.reply_to(message, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É.")
        else:
            bot.send_message(
                message.chat.id,
                "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥.\n–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:"
            )
            bot.register_next_step_handler(message, process_newbot_username)


# –®–∞–≥ 1: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
def process_newbot_username(message):
    user_id = message.from_user.id
    bot_username = message.text.strip()
    if not bot_username.startswith("@"):
        bot.send_message(
            message.chat.id,
            "‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        bot.register_next_step_handler(message, process_newbot_username)
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≤—Ä–µ–º–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å–ª–æ–≤–∞—Ä–µ)
    new_bot_data[user_id] = {"username": bot_username.lstrip("@")}
    bot.send_message(
        message.chat.id,
        "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:")
    bot.register_next_step_handler(message, process_newbot_description)


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –±–æ—Ç–∞
new_bot_data = {}


# –®–∞–≥ 2: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞
def process_newbot_description(message):
    user_id = message.from_user.id
    desc = message.text.strip()
    new_bot_data[user_id]["description"] = desc
    # –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cur.execute("SELECT name FROM Categories")
    cats = [row[0] for row in cur.fetchall()]
    if cats:
        bot.send_message(
            message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(cats)}\n"
            "(–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.)")
    else:
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:")
    bot.register_next_step_handler(message, process_newbot_category)


# –®–∞–≥ 3: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
def process_newbot_category(message):
    user_id = message.from_user.id
    category = message.text.strip()
    new_bot_data[user_id]["category"] = category
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É Categories, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    cur.execute("INSERT OR IGNORE INTO Categories (name) VALUES (?)",
                (category, ))
    # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É Bots
    bot_info = new_bot_data[user_id]
    cur.execute(
        "INSERT INTO Bots (name, username, description, category, added_by) VALUES (?, ?, ?, ?, ?)",
        (bot_info["username"], bot_info["username"], bot_info["description"],
         bot_info["category"], user_id))
    db.commit()
    # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–∞–∫ –∫–∞–∫ –æ–Ω –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞)
    cur.execute("UPDATE Users SET access_unlocked = 1 WHERE id = ?",
                (user_id, ))
    db.commit()
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(
        message.chat.id,
        f"‚úÖ –í–∞—à –±–æ—Ç @{bot_info['username']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{bot_info['category']}'.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∫–ª–∞–¥! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É –±–æ—Ç–æ–≤. üéâ")
    bot.send_message(
        message.chat.id,
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏."
    )
    # –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    new_bot_data.pop(user_id, None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search
@bot.message_handler(commands=['search'])
def handle_search(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /search <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞>: –∏—â–µ—Ç –±–æ—Ç–æ–≤ –≤ –±–∞–∑–µ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é.
    –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º.
    """
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    cur.execute("SELECT access_unlocked FROM Users WHERE id = ?", (user_id, ))
    row = cur.fetchone()
    if not row or row[0] == 0:
        bot.reply_to(
            message,
            "üîí –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –ø—Ä–∏–≥–ª–∞—Å–∏–≤ –¥—Ä—É–≥–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏–≤ –±–æ—Ç–∞."
        )
        return
    # –†–∞–∑–±–æ—Ä –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        bot.reply_to(
            message,
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <—Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /search –º—É–∑—ã–∫–∞"
        )
        return
    query = parts[1].strip().lower()
    # –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ Bots: –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    cur.execute(
        "SELECT name, username, description, category FROM Bots WHERE (name LIKE ? OR description LIKE ?) AND approved = 1",
        (f"%{query}%", f"%{query}%"))
    results = cur.fetchall()
    if not results:
        bot.send_message(
            message.chat.id,
            "ü§î –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
        )
    else:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        lines = ["üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>"]
        for name, username, description, category in results:
            lines.append(
                f"‚Ä¢ <b>{name}</b> (@{username}) ‚Äì {description} [<i>{category}</i>]"
            )
        bot.send_message(message.chat.id, "\n".join(lines))


# (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@bot.message_handler(commands=['categories'])
def handle_list_categories(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /categories: –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –±–æ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç).
    """
    user_id = message.from_user.id
    cur.execute("SELECT access_unlocked FROM Users WHERE id = ?", (user_id, ))
    row = cur.fetchone()
    if not row or row[0] == 0:
        bot.reply_to(
            message,
            "üîí –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø, –ø—Ä–∏–≥–ª–∞—Å–∏–≤ –¥—Ä—É–≥–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏–≤ –±–æ—Ç–∞."
        )
        return
    cur.execute("SELECT name FROM Categories ORDER BY name")
    cats = [row[0] for row in cur.fetchall()]
    if not cats:
        bot.reply_to(message, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
    else:
        cat_list = "üìÇ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n" + "\n".join(
            [f"‚Ä¢ {c}" for c in cats])
        bot.send_message(
            message.chat.id, cat_list +
            "\n–í–≤–µ–¥–∏—Ç–µ /browse <–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–æ—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
        )


@bot.message_handler(commands=['browse'])
def handle_browse_category(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /browse <–ö–∞—Ç–µ–≥–æ—Ä–∏—è>: –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ).
    """
    user_id = message.from_user.id
    cur.execute("SELECT access_unlocked FROM Users WHERE id = ?", (user_id, ))
    row = cur.fetchone()
    if not row or row[0] == 0:
        bot.reply_to(message,
                     "üîí –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        bot.reply_to(
            message,
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /browse <–ö–∞—Ç–µ–≥–æ—Ä–∏—è>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /browse Games")
        return
    category = parts[1].strip()
    cur.execute(
        "SELECT name, username, description FROM Bots WHERE category = ? AND approved = 1",
        (category, ))
    bots = cur.fetchall()
    if not bots:
        bot.send_message(message.chat.id,
                         f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç –±–æ—Ç–æ–≤.")
    else:
        lines = [f"üìÇ <b>–ë–æ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':</b>"]
        for name, username, description in bots:
            lines.append(f"‚Ä¢ <b>{name}</b> (@{username}) ‚Äì {description}")
        bot.send_message(message.chat.id, "\n".join(lines))


# –ó–∞–ø—É—Å–∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ Telegram –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É)
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
bot.polling(none_stop=True)
