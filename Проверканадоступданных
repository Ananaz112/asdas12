import os
from dotenv import load_dotenv
import requests
import json
from time import sleep
from datetime import datetime


class CryptoRankAPI:

    def __init__(self):
        load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
        self.api_key = os.getenv('CRYPTORANK_API_KEY')

        if not self.api_key:
            raise ValueError("API key not found in .env file")

        self.base_url = "https://api.cryptorank.io/v2"
        self.headers = {"X-Api-Key": self.api_key}
        self.credits_used = 0
        self.output_dir = "cryptorank_data"
        os.makedirs(self.output_dir, exist_ok=True)

    def make_request(self, endpoint, params=None):
        url = f"{self.base_url}/{endpoint}"
        try:
            response = requests.get(url, headers=self.headers, params=params)

            if response.status_code == 200:
                data = response.json()
                credits = data.get('status', {}).get('usedCredits', 1)
                self.credits_used += credits
                return {'success': True, 'data': data}
            else:
                return {
                    'success': False,
                    'error': f"HTTP {response.status_code}",
                    'message': response.text
                }

        except Exception as e:
            return {'success': False, 'error': str(e)}

    def save_to_file(self, data, endpoint):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{endpoint.replace('/', '_')}_{timestamp}.json"
        filepath = os.path.join(self.output_dir, filename)

        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        return filepath

    def test_endpoints(self):
        endpoints = [("currencies", {
            "limit": 1
        }), ("currencies/1", None), ("currencies/categories", None),
                     ("currencies/tags", None)]

        results = {}

        for endpoint, params in endpoints:
            print(f"Testing: {endpoint}")
            result = self.make_request(endpoint, params)

            if result['success']:
                saved_path = self.save_to_file(result['data'], endpoint)
                results[endpoint] = {
                    'status':
                    'success',
                    'credits':
                    result['data'].get('status', {}).get('usedCredits', 1),
                    'saved_to':
                    saved_path
                }
                print(
                    f"‚úÖ Success | Credits used: {results[endpoint]['credits']}"
                )
            else:
                results[endpoint] = {
                    'status': 'failed',
                    'error': result['error'],
                    'message': result.get('message', '')
                }
                print(f"‚ùå Failed: {result['error']}")

            sleep(1)  # Rate limiting

        # Save summary
        summary = {
            'api_key':
            self.api_key[:4] + '...' + self.api_key[-4:],  # Mask key
            'total_credits_used': self.credits_used,
            'results': results
        }

        with open(os.path.join(self.output_dir, 'summary.json'), 'w') as f:
            json.dump(summary, f, indent=4)

        return summary


if __name__ == "__main__":
    try:
        api = CryptoRankAPI()
        print(f"Using API key: {api.api_key[:4]}...{api.api_key[-4:]}")

        results = api.test_endpoints()

        print("\n=== Results ===")
        print(f"Total credits used: {results['total_credits_used']}")
        print(
            f"Successful calls: {sum(1 for r in results['results'].values() if r['status'] == 'success')}"
        )
        print(
            f"Failed calls: {sum(1 for r in results['results'].values() if r['status'] == 'failed')}"
        )

    except Exception as e:
        print(f"üö® Critical error: {str(e)}")
