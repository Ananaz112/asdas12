import os
import json
import requests
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
API_KEY = os.getenv('CRYPTORANK_API_KEY')
TG_TOKEN = os.getenv('TELEGRAM_TOKEN')
MAIN_DB = 'main_crypto_db.json'  # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö


class CryptoDatabase:

    def __init__(self):
        self.db_file = MAIN_DB
        self.db = self._load_db()

    def _load_db(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã"""
        if not os.path.exists(self.db_file):
            return {'projects': {}, 'last_update': None}

        with open(self.db_file, 'r') as f:
            data = json.load(f)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if isinstance(data, list):
                return {
                    'projects': {
                        p['id']: p
                        for p in data
                    },
                    'last_update': None
                }
            return data

    def _save_db(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã"""
        with open(self.db_file, 'w') as f:
            json.dump(self.db, f, indent=2)

    def get_project_key(self, project):
        """–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞"""
        return str(project['id'])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ID –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

    def analyze_new_projects(self, projects):
        """–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã"""
        new_projects = []

        for project in projects:
            key = self.get_project_key(project)

            if key not in self.db['projects']:
                project_data = {
                    'name': project.get('name'),
                    'symbol': project.get('symbol'),
                    'url':
                    f"https://cryptorank.io/price/{project.get('slug')}",
                    'added': datetime.now().strftime('%Y-%m-%d %H:%M')
                }
                self.db['projects'][key] = project_data
                new_projects.append(project_data)

        if new_projects:
            self.db['last_update'] = datetime.now().strftime('%Y-%m-%d %H:%M')
            self._save_db()

        return new_projects

    def get_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã"""
        return {
            'total': len(self.db['projects']),
            'last_update': self.db.get('last_update', '–Ω–∏–∫–æ–≥–¥–∞')
        }


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db = CryptoDatabase()


# Telegram –±–æ—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä CryptoRank\n"
                                    "–ö–æ–º–∞–Ω–¥—ã:\n"
                                    "/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã\n"
                                    "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã\n"
                                    "/clean - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É")


async def check_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    msg = await update.message.reply_text("üîé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é API...")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å API
    all_projects = []
    offset = 0
    chunk_size = 100

    while True:
        params = {
            'api_key': API_KEY,
            'limit': chunk_size,
            'offset': offset,
            'sort': 'rank'
        }
        try:
            response = requests.get("https://api.cryptorank.io/v1/currencies",
                                    params=params,
                                    timeout=15)
            data = response.json().get('data', [])
            if not data:
                break

            all_projects.extend(data)
            offset += len(data)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await msg.edit_text(f"üîé –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {offset} –ø—Ä–æ–µ–∫—Ç–æ–≤...")

        except Exception as e:
            await msg.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
            return

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    new_projects = db.analyze_new_projects(all_projects)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    stats = db.get_stats()
    report = (f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
              f"‚Ä¢ –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {stats['total']}\n"
              f"‚Ä¢ –ù–æ–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–æ: {len(new_projects)}\n"
              f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['last_update']}\n\n")

    if new_projects:
        projects_list = "\n".join(f"{i}. {p['name']} - {p['url']}"
                                  for i, p in enumerate(new_projects[:10], 1))
        report += f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ:\n{projects_list}"

        if len(new_projects) > 10:
            report += f"\n\n...–∏ –µ—â–µ {len(new_projects) - 10} –ø—Ä–æ–µ–∫—Ç–æ–≤"
    else:
        report += "üîÑ –ù–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"

    await msg.edit_text(report)


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã"""
    stats = db.get_stats()
    await update.message.reply_text(
        f"üìä –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {stats['total']}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['last_update']}\n"
        f"‚Ä¢ –§–∞–π–ª: {MAIN_DB}")


async def clean_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã"""
    db.db = {'projects': {}, 'last_update': None}
    db._save_db()
    await update.message.reply_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")


def run_bot():
    app = ApplicationBuilder().token(TG_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("check", check_new))
    app.add_handler(CommandHandler("stats", show_stats))
    app.add_handler(CommandHandler("clean", clean_db))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–∑—É:", MAIN_DB)
    app.run_polling()


if __name__ == '__main__':
    run_bot()
