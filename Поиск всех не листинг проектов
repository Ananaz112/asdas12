import os
import json
import requests
import time
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
TG_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_KEY = os.getenv("CRYPTORANK_API_KEY")

BASE_URL = "https://api.cryptorank.io/v2/currencies"
HEADERS = {"X-Api-Key": API_KEY}
LIMIT = 100  # –£–º–µ–Ω—å—à–∏–ª–∏ –ª–∏–º–∏—Ç –¥–æ 50, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É
OUTPUT_FILE = "cryptorank_all_projects.json"


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –±–∞–∑–æ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL)
def fetch_all_projects():
    offset = 0
    all_projects = {}

    while True:
        params = {"limit": LIMIT, "skip": offset}
        try:
            response = requests.get(BASE_URL,
                                    headers=HEADERS,
                                    params=params,
                                    timeout=15)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            time.sleep(2)
            continue

        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞: {response.status_code}, –∑–∞–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä...")
            time.sleep(3)
            continue

        data = response.json().get("data", [])
        if not data:
            break

        for item in data:
            slug = item.get("key")
            name = item.get("name")
            if slug and name:
                url = f"https://cryptorank.io/price/{slug}"
                all_projects[url] = name  # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ URL

        offset += len(data)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –ø—Ä–æ–µ–∫—Ç–æ–≤, –≤—Å–µ–≥–æ: {len(all_projects)}")
        time.sleep(1.2)

        if len(data) < LIMIT:
            break

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    project_list = sorted([{
        "name": name,
        "url": url
    } for url, name in all_projects.items()],
                          key=lambda x: x["name"].lower())

    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        json.dump(project_list, f, ensure_ascii=False, indent=2)

    return OUTPUT_FILE


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è Telegram
async def handle_allprojects(update: Update,
                             context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚è≥ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å CryptoRank (–±–µ–∑ –¥—É–±–ª–µ–π, —á–∞—Å—Ç—è–º–∏ –ø–æ 100)..."
    )
    file_path = fetch_all_projects()
    await update.message.reply_document(InputFile(file_path),
                                        filename=os.path.basename(file_path))


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def run_bot():
    app = ApplicationBuilder().token(TG_TOKEN).build()
    app.add_handler(CommandHandler("allprojects", handle_allprojects))
    print("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /allprojects")
    app.run_polling()


if __name__ == "__main__":
    run_bot()
