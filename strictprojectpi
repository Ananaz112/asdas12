import requests
import os
import json
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
API_KEY = os.getenv("CRYPTORANK_API_KEY")

# –ü—É—Ç–∏
DATA_DIR = "data"
CURRENT_PATH = os.path.join(DATA_DIR, "data_current.json")
OLD_PATH = os.path.join(DATA_DIR, "data_old.json")
NEW_PATH = os.path.join(DATA_DIR, "new_latest.json")

last_analysis_summary = ""  # –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è Telegram


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å CryptoRank
def fetch_projects():
    url = "https://api.cryptorank.io/v1/currencies"
    all_projects = []
    limit = 100
    offset = 0

    while True:
        params = {"api_key": API_KEY, "limit": limit, "offset": offset}
        response = requests.get(url, params=params)
        print(f"üì¶ Offset: {offset} ‚Äî –°—Ç–∞—Ç—É—Å: {response.status_code}")

        if response.status_code != 200:
            break

        data = response.json().get("data", [])
        if not data:
            break

        all_projects.extend(data)
        offset += limit

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(all_projects)}")
    return all_projects


# –ó–∞–≥—Ä—É–∑–∫–∞ JSON –∏–∑ —Ñ–∞–π–ª–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥—É–±–ª–µ–π
def load_data(path):
    if not os.path.exists(path):
        return []
    with open(path, "r", encoding="utf-8") as f:
        raw = json.load(f)
        seen_ids = set()
        unique = []
        for item in raw:
            id_ = item.get("id")
            if id_ and id_ not in seen_ids:
                seen_ids.add(id_)
                unique.append(item)
        return unique


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –≤ —Ñ–∞–π–ª
def save_data(data, path):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


# –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ id
def compare_and_extract_new(current, old):
    old_ids = {item.get("id") for item in old if item.get("id") is not None}
    return [
        item for item in current
        if item.get("id") not in old_ids and item.get("id") is not None
    ]


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å API + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã
def get_strictly_new_projects():
    current = fetch_projects()
    old = load_data(OLD_PATH)
    current_count = len(current)
    old_count = len(old)

    print(f"üìÅ –í –±–∞–∑–µ (—Å—Ç–∞—Ä—ã—Ö): {old_count} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print(f"üåê –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å API: {current_count} –ø—Ä–æ–µ–∫—Ç–æ–≤")

    if not old:
        save_data(current, OLD_PATH)
        save_data(current, CURRENT_PATH)
        print("üÜï old_data.json –±—ã–ª –ø—É—Å—Ç ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
        return [], "üÜï –ë–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Å—Ç–∞—Ä—ã—Ö –Ω–µ –±—ã–ª–æ)"

    new_projects = compare_and_extract_new(current, old)
    new_count = len(new_projects)
    print(f"üÜï –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {new_count}")

    if new_count > 0:
        save_data(new_projects, NEW_PATH)
        save_data(current, CURRENT_PATH)
        print(f"üìù –ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {NEW_PATH} (–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    else:
        print("üì≠ –ù–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ—Ç, —Ñ–∞–π–ª –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è")

    summary = (f"üìÅ –ë—ã–ª–æ –≤ –±–∞–∑–µ: {old_count}\n"
               f"üåê –°–µ–π—á–∞—Å –≤ API: {current_count}\n"
               f"üÜï –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö: {new_count}")

    return new_projects, summary


# –ê–Ω–∞–ª–∏–∑ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º, –±–µ–∑ API
def analyze_and_report():
    old = load_data(OLD_PATH)
    old_count = len(old)

    current = load_data(CURRENT_PATH)
    current_count = len(current)

    if not old:
        print("‚ö†Ô∏è old_data.json –ø—É—Å—Ç ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return 0, current_count, 0

    new_projects = compare_and_extract_new(current, old)
    new_count = len(new_projects)

    print(f"üìÅ –í –±–∞–∑–µ: {old_count} –ø—Ä–æ–µ–∫—Ç–æ–≤.")
    print(f"üìÇ –í data_current.json: {current_count} –ø—Ä–æ–µ–∫—Ç–æ–≤.")
    print(f"üÜï –ù–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {new_count}")

    return old_count, current_count, new_count


# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ—É
def save_new_projects(new_data):
    simplified_data = [{
        "name":
        item.get("name"),
        "cryptorank_url":
        f"https://cryptorank.io/price/{item.get('slug', '')}",
        "website":
        item.get("links", {}).get("website", [None])[0]
        if item.get("links") else None
    } for item in new_data]
    save_data(simplified_data, NEW_PATH)
    print(f"üìù –ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {NEW_PATH} (—Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏)")


# –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def save_seen_ids(new_data):
    full_data = load_data(CURRENT_PATH)
    save_data(full_data, OLD_PATH)
    print("‚úÖ old_data.json –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
