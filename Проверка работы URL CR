import os
import requests
import re
from urllib.parse import urljoin
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TG_TOKEN = os.getenv("TELEGRAM_TOKEN")

BASE_URL = "https://cryptorank.io"
URL_PATTERNS = [
    "/price/{slug}", "/ico/{slug}", "/price/{slug}/vesting",
    "/price/{slug}/historical-data", "/price/{slug}/exchanges"
]


def extract_slug(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç slug –∏–∑ –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
    match = re.search(r"cryptorank.io/(?:price|ico)/([^/\s]+)", text)
    return match.group(1).lower() if match else text.strip().lower()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ slug –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ CryptoRank (–Ω–∞–ø—Ä–∏–º–µ—Ä: redstone) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –≤—Å–µ –µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."
    )


async def handle_slug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    slug = extract_slug(update.message.text)
    available, unavailable = await check_project_urls(slug)

    text = f"\n‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è '{slug}':\n"
    if available:
        text += "\n" + "\n".join(available)
    else:
        text += "–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"

    text += f"\n\n‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ:\n"
    if unavailable:
        text += "\n" + "\n".join(f"{url} ‚Äî {reason}"
                                 for url, reason in unavailable)
    else:
        text += "–≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã"

    await update.message.reply_text(text[:4000])


async def check_project_urls(slug):
    available_urls = []
    unavailable_urls = []

    for pattern in URL_PATTERNS:
        relative_path = pattern.format(slug=slug)
        full_url = urljoin(BASE_URL, relative_path)
        try:
            response = requests.head(full_url, timeout=10)
            if response.status_code == 200:
                available_urls.append(full_url)
            else:
                unavailable_urls.append((full_url, f"{response.status_code}"))
        except Exception as e:
            unavailable_urls.append((full_url, str(e)))

    return available_urls, unavailable_urls


def run_bot():
    app = ApplicationBuilder().token(TG_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_slug))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    app.run_polling()


if __name__ == "__main__":
    run_bot()
