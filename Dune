from dune_api import get_large_transfers
from config import EXCHANGES, ALERT_INTERVAL
import time


def identify_flow(transfer):
    try:
        sender = transfer["sender"]
        receiver = transfer["receiver"]

        sender_name = next(
            (name for name, addr in EXCHANGES.items() if addr == sender), None)
        receiver_name = next(
            (name for name, addr in EXCHANGES.items() if addr == receiver),
            None)

        if sender_name and receiver_name:
            return f"üîÄ {sender_name} ‚Üí {receiver_name}"
        elif sender_name:
            return f"üì§ –í—ã–≤–æ–¥ —Å {sender_name}"
        elif receiver_name:
            return f"üì• –í–≤–æ–¥ –Ω–∞ {receiver_name}"
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}"


def main():
    print("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ WLD –∑–∞–ø—É—â–µ–Ω\n")
    seen_transactions = set()

    try:
        while True:
            transfers = get_large_transfers()

            for t in transfers:
                try:
                    tx_id = f"{t['timestamp']}-{t['sender']}-{t['receiver']}-{t['amount']}"

                    if tx_id not in seen_transactions:
                        print(f"""
                        {identify_flow(t)}
                        üí∞ –°—É–º–º–∞: {t['amount']:,.2f} WLD
                        ‚è∞ –í—Ä–µ–º—è: {t['timestamp']}
                        –ê–¥—Ä–µ—Å–∞: {t['sender']} ‚Üí {t['receiver']}
                        """)
                        seen_transactions.add(tx_id)

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}")
                    print(f"–î–∞–Ω–Ω—ã–µ: {t}")

            time.sleep(ALERT_INTERVAL)

    except KeyboardInterrupt:
        print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    main()






import os
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DUNE_API_KEY = os.getenv("DUNE_API_KEY")
THRESHOLD = 50000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–∞ (–≤ WLD)
ALERT_INTERVAL = 300  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –ê–¥—Ä–µ—Å–∞ –±–∏—Ä–∂ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
EXCHANGES = {
    "Binance": "0x28c6c06298d514db089934071355e5743bf21d60",
    "OKX": "0x2c8fbb630289363ac80705a1a61273f76fd5a161"
}

# –ö–æ–Ω—Ç—Ä–∞–∫—Ç WLD
WLD_CONTRACT = "0x163f8c2467924be0ae7b5347228cabf260318753"






import requests
import time
from config import DUNE_API_KEY


def debug_log(message):
    timestamp = time.strftime("%H:%M:%S")
    print(f"[{timestamp}] DEBUG: {message}")


def get_large_transfers():
    headers = {
        "x-dune-api-key": DUNE_API_KEY,
        "Content-Type": "application/json"
    }

    try:
        # 1. –ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execute_url = "https://api.dune.com/api/v1/query/5141239/execute"
        debug_log(f"–û—Ç–ø—Ä–∞–≤–∫–∞ POST –Ω–∞ {execute_url}")

        response = requests.post(execute_url, headers=headers)
        debug_log(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        debug_log(f"–û—Ç–≤–µ—Ç: {response.text[:200]}...")

        response.raise_for_status()
        execution_id = response.json()["execution_id"]
        debug_log(f"Execution ID: {execution_id}")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status_url = f"https://api.dune.com/api/v1/execution/{execution_id}/status"

        for attempt in range(10):
            status = requests.get(status_url, headers=headers).json()
            debug_log(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: {status['state']}")

            if status["state"] == "QUERY_STATE_COMPLETED":
                break
            time.sleep(3)
        else:
            raise TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")

        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_url = f"https://api.dune.com/api/v1/execution/{execution_id}/results"
        results = requests.get(results_url, headers=headers)
        results.raise_for_status()

        data = results.json()
        debug_log(
            f"–ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(data.get('result', {}).get('rows', []))}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        formatted_data = []
        for row in data.get("result", {}).get("rows", []):
            try:
                formatted_data.append({
                    "timestamp":
                    row.get("evt_block_time", row.get("hour", "N/A")),
                    "sender":
                    row.get("from", "").lower(),
                    "receiver":
                    row.get("to", "").lower(),
                    "amount":
                    float(row.get("value", row.get("wld_received", 0)))
                })
            except Exception as e:
                debug_log(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}\n–î–∞–Ω–Ω—ã–µ: {row}")

        return formatted_data

    except Exception as e:
        debug_log(f"–û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        debug_log(traceback.format_exc())
        return []
